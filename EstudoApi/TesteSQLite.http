### Arquivo de testes para as APIs do esquema SQLite da Ana
### BankMore - Fintech APIs

@baseUrlMain = http://localhost:5041
@baseUrlBanking = http://localhost:5042
@token = {{login.response.body.token}}

### 1. Login para obter token
POST {{baseUrlMain}}/api/auth/login
Content-Type: application/json

{
  "email": "teste@teste.com",
  "password": "123456"
}

### 2. Criar nova conta corrente
POST {{baseUrlMain}}/api/contas
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "numero": 12345,
  "nome": "Jo√£o da Silva",
  "senha": "minhasenha123"
}

### 3. Buscar conta por n√∫mero
GET {{baseUrlMain}}/api/contas/12345
Authorization: Bearer {{token}}

### 4. Consultar saldo
GET {{baseUrlMain}}/api/contas/12345/saldo
Authorization: Bearer {{token}}

### 5. Fazer dep√≥sito
POST {{baseUrlMain}}/api/contas/12345/deposito
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "valor": 1000.50
}

### 6. Listar movimentos
GET {{baseUrlMain}}/api/contas/12345/movimentos?limite=5
Authorization: Bearer {{token}}

### 7. Fazer outro dep√≥sito
POST {{baseUrlMain}}/api/contas/12345/deposito
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "valor": 250.75
}

### 8. Verificar saldo ap√≥s dep√≥sitos
GET {{baseUrlMain}}/api/contas/12345/saldo
Authorization: Bearer {{token}}

### 9. Criar segunda conta para testes de transfer√™ncia
POST {{baseUrlMain}}/api/contas
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "numero": 67890,
  "nome": "Maria Santos",
  "senha": "senhamaria456"
}

### 10. Ping para verificar se API est√° rodando
GET {{baseUrlMain}}/api/ping

### ===== TESTES DE MICROSERVI√áOS BANKING =====

### 11. Fazer transfer√™ncia via API Banking
POST {{baseUrlBanking}}/api/banking/transfer
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "requisicaoId": "TRANSF-001",
  "contaOrigem": 12345,
  "contaDestino": 67890,
  "valor": 100.00,
  "descricao": "Transfer√™ncia teste SQLite"
}

### ===== TESTES DE VALIDA√á√ÉO =====

### 12. Tentar criar conta com n√∫mero duplicado (deve falhar)
POST {{baseUrlMain}}/api/contas
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "numero": 12345,
  "nome": "Conta Duplicada",
  "senha": "senha123"
}

### 13. Buscar conta inexistente (deve retornar 404)
GET {{baseUrlMain}}/api/contas/99999
Authorization: Bearer {{token}}

### 14. Tentar dep√≥sito com valor inv√°lido (deve falhar)
POST {{baseUrlMain}}/api/contas/12345/deposito
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "valor": -100
}

### 15. Teste sem token (deve retornar 401)
GET {{baseUrlMain}}/api/contas/12345

### ===== RESUMO DOS ENDPOINTS =====
# 
# ‚úÖ POST /api/contas - Criar conta corrente
# ‚úÖ GET /api/contas/{numero} - Buscar conta por n√∫mero
# ‚úÖ GET /api/contas/{numero}/saldo - Consultar saldo
# ‚úÖ GET /api/contas/{numero}/movimentos - Listar movimentos
# ‚úÖ POST /api/contas/{numero}/deposito - Fazer dep√≥sito
# ‚úÖ POST /api/banking/transfer - Transferir entre contas (microservi√ßo)
#
# üîÑ Pr√≥ximos endpoints a implementar:
# - GET /api/transferencias/{numero} - Hist√≥rico de transfer√™ncias
# - POST /api/contas/{numero}/saque - Fazer saque
# - GET /api/tarifas/{numero} - Consultar tarifas cobradas
# - POST /api/auth/conta - Login espec√≠fico por conta
#
